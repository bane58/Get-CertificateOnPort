<#
Tony Unger

example code
https://gist.github.com/jstangroome/5945820

$DC = get-adcomputer -filter * -searchbase "ou=domain controllers,dc=microsoft,dc=com" | select -expand name
#>

function Get-CertificateOnPort
{
    [CmdletBinding()]
    [Alias()]
    [OutputType([int])]
    Param
    (
        # Servers wanting to scan
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        [string[]]$servers,
        # Port that you want to check
        [int]
        $port
    )

    Begin
    {
    $report = @()
    $Certificate = $null
    #$servers
       
    }
    Process
    {
        foreach ($Server in $servers){
       
        $TcpClient = New-Object -TypeName System.Net.Sockets.TcpClient
        try {
            $TcpClient.Connect($Server, $Port)
            $TcpStream = $TcpClient.GetStream()
            $Callback = { param($sender, $cert, $chain, $errors) return $true }
            $SslStream = New-Object -TypeName System.Net.Security.SslStream -ArgumentList @($TcpStream, $true, $Callback)
            try {
                $SslStream.AuthenticateAsClient('')
                $Certificate = $SslStream.RemoteCertificate
            }
            finally {
                $SslStream.Dispose()
            }
        } 

        finally {
            $TcpClient.Dispose()
        }

        if ($Certificate) {
            if ($Certificate -isnot [System.Security.Cryptography.X509Certificates.X509Certificate2]) {
                $Certificate = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2 -ArgumentList $Certificate | Select-Object * # | select DNSNameList,NotAfter,Subject
            # need to set something up to handle DNSNameList export
                $details = new-object PSObject -property @{
		            SubjectName = ($Certificate.Subject).Split("=")[1]
                    DNSNameList = $Certificate.DnsNameList
                    NotAfter = $Certificate.NotAfter
                    issuing = ((($Certificate | Select-Object -expand issuername).name).split(",")[0]).split("=")[1]
                    Server = $server
                    SerialNumber = $Certificate.SerialNumber
                    thumbprint = $Certificate.Thumbprint
                    Port = $Port
	            }
                $report += $details
                #start-sleep 2
                $Certificate = $null
            }
            
        }
        else {
            $details = new-object PSObject -property @{
                SubjectName = $null
                DNSNameList = $null
                NotAfter = $null
                issuing = $null
                Server = $server
                SerialNumber = $null
                thumbprint = $null
                Port = $Port
            }
            $report += $details

        }
        }
    
    }

    End
    {
        $report | Select-Object Server,SubjectName,DNSNameList,NotAfter,Issuing,Port,SerialNumber,Thumbprint
    }
}
